@page "/"
@using Blazorise
@using Blazorise.DataGrid
@using Syncfusion.Blazor.Schedule
@rendermode InteractiveServer
@inject IJSRuntime JS


<PageTitle>Registro Horas</PageTitle>
@if (showErrorMessage)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => showErrorMessage = false"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-center flex-wrap mb-3">
    <!-- Sección Registro Horas y Botones -->
    <div class="w-50">
        <h2 class="d-flex justify-content-between align-items-center flex-wrap">
            <span>Registro Horas - Semana @sSemana</span>
        </h2>
        <!-- Botones de vista y Agregar Horas -->
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
            <!-- Botones de vista -->
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary btn-sm" @onclick="MostrarCalendario">
                    <i class="bi bi-calendar3"></i> Calendario
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="MostrarTarjetas">
                    <i class="bi bi-card-list"></i> Tarjetas
                </button>
                <!-- Botón Agregar Horas en el grupo -->
                <button type="button" class="btn btn-outline-success btn-sm" data-bs-toggle="modal" data-bs-target="#myModal">
                    <i class="bi bi-alarm"></i> Agregar Horas
                </button>
                <!-- Botón para abrir el modal de filtros -->
                <button class="btn btn-outline-info btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#filtrosModal">
                    <i class="bi bi-funnel"></i> Filtros
                </button>
            </div>
        </div>
    </div>

    <!-- Sección KPI Total Horas -->
    <div class="w-50 text-end">
        <!-- KPI Total Horas al Top de la Página -->
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
            <div class="card shadow-sm border-0 bg-light-subtle ms-auto mt-2 mt-sm-0" style="min-width: 220px;">
                <div class="card-body d-flex align-items-center p-3">
                    <div class="me-3 text-primary">
                        <i class="bi bi-clock-history" style="font-size: 1.8rem;"></i>
                    </div>
                    <div>
                        <div class="text-muted" style="font-size: 0.85rem;">Total Horas Registradas</div>
                        <div class="fw-bold text-dark" style="font-size: 1.4rem;">@_TotalHoras hs</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Modal de Filtros -->
<div class="modal fade" id="filtrosModal" tabindex="-1" aria-labelledby="filtrosModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filtrosModalLabel">Filtros</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Filtros dentro del modal (formulario vertical) -->
                <form>
                    <div class="mb-3">
                        <label for="semanaSelect" class="form-label">Semana del Año</label>
                        <select class="form-select" id="semanaSelect" @bind="sSemana">
                            <option value="">Todas</option>
                            @for (int semana = 1; semana <= 53; semana++)
                            {
                                if (semana == AppState.NueroSemana)
                                {
                                    <option class="fw-bold btn-info" value="@semana">Semana @semana (Actual)</option>
                                }
                                else
                                {
                                    <option value="@semana">Semana @semana</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="clienteInput" class="form-label">Cliente</label>
                        <input type="text" class="form-control" id="clienteInput" @bind=sCliente>
                    </div>
                    <div class="mb-3">
                        <label for="areaFuncionalInput" class="form-label">Área Funcional</label>
                        <input type="text" class="form-control" id="areaFuncionalInput" @bind=sTarea>
                    </div>
                    <div class="mb-3">
                        <label for="productoInput" class="form-label">Producto</label>
                        <input type="text" class="form-control" id="productoInput" @bind=sProducto>
                    </div>
                    <div class="mb-3">
                        <label for="patenteInput" class="form-label">Patente</label>
                        <input type="text" class="form-control" id="patenteInput" @bind=sPatente>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="()=> cargarTareas()" data-bs-dismiss="modal">Aplicar Filtros</button>
            </div>
        </div>
    </div>
</div>

<!-- Model Eliniar -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content shadow-sm rounded-3">

            <!-- Modal Header -->
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirmar eliminación</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body text-center">
                <p class="fs-5">¿Desea eliminar la tarea?</p>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer d-flex justify-content-end">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" data-bs-dismiss="modal">Eliminar</button>
            </div>

        </div>
    </div>
</div>

<!-- Modal Edit-->
<div class="modal fade" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Registro de Horas</h4>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">X</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body d-flex justify-content-center">
                <EditForm Model="_newTarea" OnValidSubmit="Save">
                    <DataAnnotationsValidator />
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />


                    <table>
                        <!-- Fecha -->
                        <tr>
                            <td>
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Fecha</span>
                                    <InputDate @bind-Value="_newTarea.fecha" class="form-control border-start-0" />
                                </div>
                            </td>
                        </tr>

                        <!-- Cliente -->
                        <tr>
                            <td>
                                @if (_clienteid == null)
                                {
                                    <div class="text-danger" style="font-size:10pt;">Debe seleccionar un cliente válido de la lista.</div>
                                }
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Cliente</span>
                                    <input class="form-select"
                                           list="clienteList"
                                           @bind="_clienteid"
                                           @oninput="OnClienteInput"
                                           placeholder="Seleccione un cliente" required />
                                    <datalist id="clienteList">
                                        @foreach (var cliente in lClientes)
                                        {
                                            <option value="@cliente.nombre"></option>
                                        }
                                    </datalist>
                                </div>

                            </td>
                        </tr>

                        <!-- Área Funcional -->
                        <tr>
                            <td>
                                @if (_areaNombre == null)
                                {
                                    <div class="text-danger" style="font-size:10pt;">Debe seleccionar un Area válida de la lista.</div>
                                }
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Area Funcional</span>
                                    <input class="form-control"
                                           list="areaList"
                                           @bind="_areaNombre"
                                           @oninput="OnAreaInput"
                                           placeholder="Seleccione un area" required />
                                    <datalist id="areaList">
                                        @foreach (var area in lAreaFuncional)
                                        {
                                            <option value="@area.nombre" />
                                        }
                                    </datalist>
                                </div>
                            </td>
                        </tr>

                        <!-- Producto -->
                        <tr>
                            <td>
                                @if (_productoNombre == null)
                                {
                                    <div class="text-danger" style="font-size:10pt;">Debe seleccionar un producto válido de la lista.</div>
                                }
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Productos</span>
                                    <input class="form-select"
                                           list="productoList"
                                           @bind="_productoNombre"
                                           @oninput="OnproductoInput"
                                           placeholder="Seleccione un producto" required />
                                    <datalist id="productoList">
                                        @foreach (var producto in lProductos)
                                        {
                                            <option value="@producto.nombre"></option>
                                        }
                                    </datalist>
                                </div>
                            </td>
                        </tr>

                        <!-- Tarea -->
                        <tr>
                            <td>
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Tarea</span>
                                    <InputTextArea class="form-control" @bind-Value="_newTarea.tarea" rows="3" required />
                                </div>
                            </td>
                        </tr>

                        <!-- Patente (con datalist) -->
                        <tr>
                            <td>
                                @if (_patenteNombre == null)
                                {
                                    <div class="text-danger" style="font-size:10pt;">Debe seleccionar una patente válida de la lista.</div>
                                }
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Patente</span>
                                    <input class="form-control"
                                           list="patenteList"
                                           @bind="_patenteNombre"
                                           @oninput="OnPatenteInput"
                                           placeholder="Seleccione una Patente" required />
                                    <datalist id="patenteList">
                                        @foreach (var patente in lPatentes)
                                        {
                                            <option value="@patente.nombre" />
                                        }
                                    </datalist>
                                </div>
                            </td>
                        </tr>


                        <!-- Horas -->
                        <tr>
                            <td>
                                <div class="input-group mb-3 input-group-sm position-relative">
                                    <span class="input-group-text" style="width:120px;">Horas</span>
                                    <InputNumber class="form-floating"
                                                 @bind-Value="_newTarea.horas"
                                                 @onblur="ValidarHoras"
                                                 required />
                                </div>
                            </td>
                        </tr>

                        <!-- Minutos -->
                        <tr>
                            <td>
                                <div class="input-group mb-3 input-group-sm">
                                    <span class="input-group-text" style="width:120px;">Minutos</span>
                                    <InputNumber class="form-control" @bind-Value="_newTarea.minutos" required />

                                </div>
                            </td>
                        </tr>

                        <!-- Botón de Guardar -->
                        <tr>
                            <td>
                                <button class="btn btn-success" type="submit">
                                    Guardar
                                </button>
                            </td>
                        </tr>
                    </table>
                </EditForm>
            </div>

            <!-- Modal footer -->

        </div>
    </div>
</div>

@{
    if (verCalendario)
    {
        <div style="padding: 10px;">
            <!-- Título con Icono de Bootstrap -->
            <div style="display: flex; align-items: center; margin-bottom: 15px;">
                <!-- Icono de Bootstrap -->
                <i class="bi bi-calendar3" style="font-size: 30px; color: #007BFF; margin-right: 10px;"></i>
                <!-- Título -->
                <h3 style="font-size: 18pt; color: #333; font-weight: 500;">Calendario</h3>
            </div>
            <div style="overflow-y:auto; max-height: 56vh; width: 100%; padding: 10px; background-color: white;">
                <table class="table table-bordered table-hover" style="border-radius: 10px; border-collapse: separate; border-spacing: 0 5px;">
                    <thead class="bg-light text-dark" style="position: sticky; top: -10px; z-index: 1;">
                        <tr>
                            <th class="text-center" style="width: 60px; font-size: 12pt; font-weight: 300; color: #555;">
                                <i style="font-size: 10pt;">Hora</i>
                            </th>

                            @for (int _index = 0; _index < 5; _index++)
                            {
                                if (ltareas.Count() > 0)
                                {
                                    _dia = ltareas.Min(o => o.PrimerDiaSemana).AddDays(_index);
                                }
                                else
                                {
                                    _dia = _dia.AddDays(_index);
                                }


                                <th class="text-center">
                                    <div class="d-flex flex-column align-items-center">
                                        <p class="m-0" style="font-size: 12pt; font-weight: 400; color: #6c757d; font-family: 'Roboto', sans-serif;">
                                            @{
                                                var _dNombre = char.ToUpper(_dia.ToString("dddd")[0]) + _dia.ToString("dddd").Substring(1, 2);
                                            }
                                            @_dNombre
                                        </p>
                                        @if (_dia.Day.Equals(DateTime.Now.Date.Day))
                                        {
                                            <div style="width: 25px; height: 25px; border-radius: 50%; background-color: darkblue; color: white; font-size: 10pt; display: flex; justify-content: center; align-items: center; font-weight: bold;">
                                                @_dia.Day
                                            </div>
                                        }
                                        else
                                        {
                                            <div><i style="font-size: 10pt; color: #007BFF;">@_dia.Day</i></div>
                                        }
                                    </div>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int _hora = 0; _hora < 24; _hora++)
                        {
                            <tr>
                                <td class="text-center align-middle" style="font-size: 10pt; color: #4a4a4a;">
                                    <i>@_hora:00</i>
                                </td>
                                @for (int _index = 0; _index < 5; _index++)
                                {
                                    if (ltareas.Count() > 0)
                                    {
                                        _dia = ltareas.Min(o => o.PrimerDiaSemana).AddDays(_index);
                                    }
                                    else
                                    {
                                        _dia = _dia.AddDays(_index);
                                    }


                                    <td class="text-center" style="position: relative; vertical-align: middle; font-size: 9pt; color: #333; padding: 10px;">
                                        @{
                                            var _tHoras = CalcularHoras(_dia.Date, _hora);
                                            if (_tHoras > 0)
                                            {
                                                <div class="d-flex flex-column align-items-center">
                                                    <span class="badge bg-success" style="font-size: 9pt; padding: 2px 5px; font-weight: normal;">
                                                        <i class="bi bi-clock" style="font-size: 10pt;"></i> @_tHoras hs
                                                    </span>
                                                    <i class="bi bi-check-circle" style="font-size: 14pt; color: green;"></i>
                                                </div>
                                            }
                                            else
                                            {
                                                <i class="bi" style="font-size: 14pt; color: #007BFF;"></i> <!-- Icono de día sin tareas -->
                                            }
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                    <!--Totales-->
                    <tfoot style="background-color:white; height:0px;">
                        <tr style="position: sticky; bottom: 0; z-index: 99;">
                            <td class="text-center fw-bold" style="background-color: #f8f9fa; font-size: 10pt; color: #333;">
                                Total
                            </td>
                            @for (int _index = 0; _index < 5; _index++)
                            {
                                DateTime _diaTotal = ltareas.Count() > 0
                                ? ltareas.Min(o => o.PrimerDiaSemana).AddDays(_index)
                                : DateTime.Today.AddDays(_index);

                                double totalHorasDia = CalcularTotalHorasPorDia(_diaTotal);

                                <td class="text-center fw-bold" style="background-color: #f8f9fa; font-size: 14pt; color: darkblue;">
                                    @totalHorasDia.ToString("0.#") hs
                                </td>
                            }
                        </tr>
                    </tfoot>                   
                </table>
            </div>
            
        </div>
    }
    else
    {
        <div>
            <!-- Título con Icono de Bootstrap -->
            <div style="display: flex; align-items: center; margin-bottom: 15px;">
                <!-- Icono de Bootstrap -->
                <i class="bi bi-card-list" style="font-size: 30px; color: #007BFF; margin-right: 10px;"></i>
                <!-- Título -->
                <h3 style="font-size: 18pt; color: #333; font-weight: 500;">Tarjetas</h3>
            </div>

            <!-- Contenedor con scroll solo para las tarjetas -->
            <div style="max-height: 70vh; overflow-y: auto;">
                @foreach (var t in ltareas)
                {
                    <div class="card mb-3 shadow-lg border-0 rounded-4" style="font-size: 0.9rem; background: transparent;">
                        <div class="card-body px-4 py-3">
                            <!-- Encabezado con Cliente y Fecha -->
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <strong class="text-primary" style="font-size: 1.1rem; font-weight: 600;">@t.Cliente.nombre</strong>
                                <span class="text-muted" style="font-size: 0.8rem; font-weight: 400;">
                                    @t.fecha.ToString("dddd dd/MM/yyyy") · Semana @t.NumeroSemana
                                </span>
                            </div>

                            <!-- Información de la Tarea -->
                            <div class="mb-3">
                                <div><strong>Usuario:</strong> @t.Usuario</div>
                                <div><strong>Área:</strong> @t.AreaFuncional.nombre</div>
                                <div><strong>Tarea:</strong> @t.tarea</div>
                                @if (!string.IsNullOrEmpty(t?.Patente?.nombre))
                                {
                                    <div><strong>Patente:</strong> @t.Patente.nombre</div>
                                }
                                <div><strong>Producto:</strong> @t.Producto.nombre</div>
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-clock" style="font-size: 1.2rem; color: #007bff;"></i>
                                    <span class="ms-2"><strong>Horas:</strong> @($"{t.horas}:{t.minutos.ToString().PadLeft(2, '0')}")</span>
                                </div>
                            </div>

                            <!-- Botones de Editar y Eliminar -->
                            <div class="d-flex justify-content-end gap-3">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => Edit(t.id)" data-bs-toggle="modal" data-bs-target="#myModal">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(t.id)" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                    <i class="bi bi-trash3"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    }
}

@code {
    private bool isFormValid = true;
    private int? sSemana = null;
    private string _patenteNombre;
    private string _productoNombre;
    private string _areaNombre;
    private string _clienteid;
    private double _TotalHoras = new double();
    private Tareas _newTarea = new Tareas();
    private IList<Tareas> ltareas = new List<Tareas>();
    private IList<dimClientes> lClientes = new List<dimClientes>();
    private IList<dimAreaFuncional> lAreaFuncional = new List<dimAreaFuncional>();
    private IList<dimPatentes> lPatentes = new List<dimPatentes>();
    private IList<dimProductos> lProductos = new List<dimProductos>();
    private string sCliente = string.Empty;
    private string sTarea = string.Empty;
    private string sProducto = string.Empty;
    private string sPatente = string.Empty;
    private bool horasInvalid = false;
    private bool verCalendario = true;
    private int deleteId;
    private string errorMessage;
    private bool showErrorMessage = false;
    private DateTime _dia = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        lClientes = AppState.lClientes;
        lAreaFuncional = AppState.lAreaFuncional;
        lPatentes = AppState.lPatentes;
        lProductos = AppState.lProductos;

        if (sSemana == null)
            sSemana = AppState.NueroSemana;

        NuevaTareas();
        cargarTareas();
    }

    private void cargarTareas()
    {
        ltareas = _context.Tareas.Include(c => c.Cliente)
            .Include(p => p.Patente)
            .Include(pr => pr.Producto)
            .Include(a => a.AreaFuncional)
            .Where(w => w.Cliente.nombre.Contains(sCliente)
                && w.AreaFuncional.nombre.Contains(sTarea)
                && w.Producto.nombre.Contains(sProducto)
                && w.Patente.nombre.Contains(sPatente)
            ).OrderByDescending(o => o.fecha)
            .ToList();

        if (AppState.UserName != "datawarehouse")
        {
            ltareas = ltareas.Where(w => w.Usuario == AppState.UserName).ToList();
        }

        if (sSemana == null)
            ltareas = ltareas.Where(w => w.NumeroSemana == AppState.NueroSemana).ToList();
        else
            ltareas = ltareas.Where(w => w.NumeroSemana == sSemana).ToList();

        ClearError();
        CalcularHoras();
        NuevaTareas();
    }

    private async Task NuevaTareas()
    {
        _newTarea = new Tareas();
        _newTarea.fecha = DateTime.SpecifyKind(DateTime.Now.AddHours(-3), DateTimeKind.Unspecified);
        _newTarea.Usuario = AppState.UserName;
        if (AppState.DefaultClienteId > 0)
            _newTarea.clienteId = AppState.DefaultClienteId;

        if (AppState.DefaultAreaFuncionalId > 0)
            _newTarea.areaFuncionalId = AppState.DefaultAreaFuncionalId;

        if (AppState.DefaultProductoId > 0)
            _newTarea.productoId = AppState.DefaultProductoId;


        _patenteNombre = "";
        _productoNombre = AppState.DefaultProducto;
        _clienteid = AppState.DefaultCliente;
        _areaNombre = AppState.DefaultAreaFuncional;

        CalcularHoras();
    }

    private void CalcularHoras()
    {
        var _MinutosHoras = ltareas.Sum(o => o.horas) * 60;
        var _MinutosTotales = ltareas.Sum(o => o.minutos) + _MinutosHoras;

        TimeSpan ts = TimeSpan.FromMinutes(_MinutosTotales);

        // Convertir a HH.mm (ej: 3.15 = 3 horas y 15 minutos)
        int horas = ts.Hours + ts.Days * 24;
        int minutos = ts.Minutes;

        _TotalHoras = double.Parse($"{horas},{minutos:D2}");


        //_TotalHoras = Math.Round(ts.TotalHours, 2);
    }

    private double CalcularHoras(DateTime fecha, int hora)
    {
        var tareas = ltareas.Where(w => w.fecha.Date.Equals(fecha) && w.fecha.Hour.Equals(hora)).ToList();
        var _MinutosHoras = tareas.Sum(o => o.horas) * 60;
        var _MinutosTotales = tareas.Sum(o => o.minutos) + _MinutosHoras;
        TimeSpan ts = TimeSpan.FromMinutes(_MinutosTotales);
        // Convertir a HH.mm (ej: 3.15 = 3 horas y 15 minutos)
        int horas = ts.Hours + ts.Days * 24;
        int minutos = ts.Minutes;

        return double.Parse($"{horas},{minutos:D2}"); // Math.Round(ts.TotalHours, 2);
    }

    private double CalcularTotalHorasPorDia(DateTime dia)
    {
        var _MinutosHoras = ltareas.Where(t => t.fecha.Date == dia.Date).Sum(o => o.horas) * 60;
        var _MinutosTotales = ltareas.Where(t => t.fecha.Date == dia.Date).Sum(o => o.minutos) + _MinutosHoras;
        TimeSpan ts = TimeSpan.FromMinutes(_MinutosTotales);
        int horas = ts.Hours + ts.Days * 24;
        int minutos = ts.Minutes;

        return double.Parse($"{horas},{minutos:D2}");
    }

    private async Task Save()
    {
        isFormValid = true;

        try
        {

            //_newTarea.fecha = DateTime.SpecifyKind(_newTarea.fecha, DateTimeKind.Unspecified); ;


            //validarNull
            if (_newTarea.patenteId == null || _newTarea.clienteId == null || _newTarea.areaFuncionalId == null || _newTarea.productoId == null)
            {
                return;
            }

            _newTarea.patenteId = (_newTarea.patenteId.Equals(0)) ? null : _newTarea.patenteId;
            _newTarea.clienteId = (_newTarea.clienteId.Equals(0)) ? 0 : _newTarea.clienteId;
            _newTarea.areaFuncionalId = (_newTarea.areaFuncionalId.Equals(0)) ? null : _newTarea.areaFuncionalId;
            _newTarea.productoId = (_newTarea.productoId.Equals(0)) ? null : _newTarea.productoId;


            if (_newTarea.fecha.Hour == 0)
            {
                DateTime _f = DateTime.Now.AddHours(-3);
                _newTarea.fecha = _newTarea.fecha.AddHours(_f.Hour);
            }


            if (_newTarea.id > 0)
            {
                _context.Tareas.Update(_newTarea);

                _context.SaveChanges();
            }
            else
            {

                _context.Tareas.Add(_newTarea);
                _context.SaveChanges();


            }
            await JS.InvokeVoidAsync("cerrarModalPorId", "myModal");
        }

        catch (Exception e)
        {
            ShowError($"Ocurrió un error al guardar la tarea: {e.Message}");
        }

        cargarTareas();
    }

    private void Delete(int id)
    {
        deleteId = id;
    }



    private async Task ConfirmDelete()
    {
        if (deleteId > 0)
        {
            _newTarea = _context.Tareas.Find(deleteId);
            if (_newTarea != null)
            {
                _context.Tareas.Remove(_newTarea);
                _context.SaveChanges();
                deleteId = 0;
                cargarTareas();
            }
        }
    }

    private async Task Edit(int id)
    {
        _newTarea = _context.Tareas.Find(id);
        _patenteNombre = _newTarea.Patente.nombre;
        _productoNombre = _newTarea.Producto.nombre;
        _clienteid = _newTarea.Cliente.nombre;
    }

    private async Task CleaFilters()
    {
        sCliente = string.Empty;
        sTarea = string.Empty;
        sProducto = string.Empty;
        sPatente = string.Empty;
        cargarTareas();
    }

    private async Task OnPatenteInput(ChangeEventArgs e)
    {
        var _search = e.Value?.ToString();
        var seleccionada = lPatentes.FirstOrDefault(p => p.nombre == _search);
        if (seleccionada != null)
        {
            _newTarea.patenteId = seleccionada.id;
            _patenteNombre = seleccionada.nombre;
        }
        else
        {
            _newTarea.patenteId = null; // O null si es nullable
            _patenteNombre = null;
        }
    }

    private void OnClienteInput(ChangeEventArgs e)
    {
        _newTarea.clienteId = null; // O null si es nullable
        _clienteid = null;
        var _search = e.Value?.ToString();
        var seleccionada = lClientes.FirstOrDefault(p => p.nombre == _search);
        if (seleccionada != null)
        {
            _newTarea.clienteId = seleccionada.id;
            _clienteid = seleccionada.nombre;
        }
    }

    private async Task OnproductoInput(ChangeEventArgs e)
    {
        var _search = e.Value?.ToString();
        var seleccionada = lProductos.FirstOrDefault(p => p.nombre == _search);
        if (seleccionada != null)
        {
            _newTarea.productoId = seleccionada.id;
            _productoNombre = seleccionada.nombre;
        }
        else
        {
            _newTarea.productoId = null; // O null si es nullable
            _productoNombre = null;
        }
    }

    private async Task OnAreaInput(ChangeEventArgs e)
    {
        var _search = e.Value?.ToString();
        var seleccionada = lAreaFuncional.FirstOrDefault(p => p.nombre == _search);
        if (seleccionada != null)
        {
            _newTarea.areaFuncionalId = seleccionada.id;
            _areaNombre = seleccionada.nombre;
        }
        else
        {
            _newTarea.areaFuncionalId = null; // O null si es nullable
            _areaNombre = null;
        }
    }

    void ValidarHoras(FocusEventArgs e)
    {
        horasInvalid = _newTarea.horas <= 0;
    }

    void MostrarCalendario()
    {
        verCalendario = true;
    }

    void MostrarTarjetas()
    {
        verCalendario = false;
    }

    private async void ShowError(string message)
    {
        errorMessage = message;
        showErrorMessage = true;
        await JS.InvokeVoidAsync("cerrarModalPorId", "myModal");
        await Task.Delay(3000);
        showErrorMessage = false;
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
        showErrorMessage = false;
    }

    private void setPrimerDiaSemana()
    {
        DateTime hoy = DateTime.Now;

        // Hacemos que lunes sea siempre el primer día de la semana
        int diferencia = (7 + ((int)hoy.DayOfWeek - (int)DayOfWeek.Monday)) % 7;

        DateTime primerDiaSemana = hoy.AddDays(-diferencia);

        // Ahora _dia es el lunes de esta semana
        _dia = primerDiaSemana;
    }
}


