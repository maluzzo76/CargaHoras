@page "/Horas"
@using Blazorise
@using Blazorise.DataGrid
@rendermode InteractiveServer


<PageTitle>Registro Horas</PageTitle>


<h1>
	Registro Horas
	<span>
		<button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#myModal">
			<i class="bi bi-alarm"> Agregar Horas</i>
		</button>
	</span>
</h1>

<div class="d-flex justify-content-end ">
	<i style="font-size:16pt;">Total Horas Registradas   <span class="badge bg-warning text-black">@_TotalHoras</span></i>
</div>
<hr />
<!--Filtros-->
<div class="row">
	<div class="col-md-3">
		<div class="input-group mb-3 input-group-sm">
			<span class="input-group-text">Cliente</span>
			<input type="text" class="form-control" @bind=sCliente>
		</div>
	</div>
	<div class="col-md-3">
		<div class="input-group mb-3 input-group-sm">
			<span class="input-group-text">Tarea</span>
			<input type="text" class="form-control" @bind=sTarea>
		</div>
	</div>
	<div class="col-md-3">
		<div class="input-group mb-3 input-group-sm">
			<span class="input-group-text">Producto</span>
			<input type="text" class="form-control" @bind=sProducto>
		</div>
	</div>
	<div class="col-md-3">
		<div class="input-group mb-3 input-group-sm">
			<i class="bi bi-search" @onclick="()=> cargarTareas()"></i>
			<i class="bi bi-x-lg" @onclick="()=> CleaFilters()"></i>
		</div>
	</div>
</div>

<div class="modal fade" id="myModal">
	<div class="modal-dialog">
		<div class="modal-content">

			<!-- Modal Header -->
			<div class="modal-header">
				<h4 class="modal-title">Registro de Horas</h4>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>

			<!-- Modal body -->
			<div class="modal-body d-flex justify-content-center">
				<table>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Fecha</span>
								<input type="date" class="form-control" @bind=_newTarea.fecha />
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Cliente</span>
								<select @bind="_newTarea.clienteId" class="form-select">
									<option value="0">Seleccione un Cliente</option>
									@foreach (var Cliente in lClientes)
									{
										<option value="@Cliente.id">@Cliente.nombre</option>
									}
								</select>
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Tarea</span>
								<select @bind="_newTarea.areaFuncionalId" class="form-select">
									<option value="0">Seleccione una Tarea</option>
									@foreach (var Tarea in lAreaFuncional)
									{
										<option value="@Tarea.id">@Tarea.nombre</option>
									}
								</select>
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Estado</span>
								<select @bind="_newTarea.estado" class="form-select">
									<option value="0">Estado</option>
									<option value="Estado 1">Estado 1</option>
									<option value="Estado 2">Estado 2</option>
									<option value="Estado 3">Estado 3</option>
								</select>
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Patente</span>
								<select @bind="_newTarea.patenteId" class="form-select">
									<option value="0">Seleccione una Patente</option>
									@foreach (var Patente in lPatentes)
									{
										<option value="@Patente.id">@Patente.nombre</option>
									}
								</select>
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Producto</span>
								<select @bind="_newTarea.productoId" class="form-select">
									<option value="0">Seleccione un Producto</option>
									@foreach (var Producto in lProductos)
									{
										<option value="@Producto.id">@Producto.nombre</option>
									}
								</select>
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Horas</span>
								<input type="number" class="form-control" @bind=_newTarea.horas placeholder="Hs" />
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="col input-group mb-3 input-group-sm">
								<span class="input-group-text" style="width:100px;">Minutos</span>
								<input type="number" class="form-control" @bind=_newTarea.minutos placeholder="Min" />
							</div>
						</td>
					</tr>
				</table>

			</div>

			<!-- Modal footer -->
			<div class="modal-footer">
				<button class="btn btn-success" data-bs-dismiss="modal" style="padding:5px;" @onclick="() => Save()">
					<i class="bi bi-floppy"> Guardar</i>
				</button>
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
			</div>

		</div>
	</div>
</div>


<table class="table">
	<thead>
		<tr>
			<th>Usuario</th>
			<th>Fecha</th>
			<th>Cliente</th>
			<th>Tareas</th>
			<th>Estado</th>
			<th>Patente</th>
			<th>Producto</th>
			<th>Horas</th>
			<th></th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td colspan="8">
			</td>

		</tr>
		@foreach (var _t in ltareas)
		{
			<tr>
				<td>@_t.Usuario</td>
				<td>@_t.fecha</td>
				<td>@_t.Cliente.nombre</td>
				<td>@_t.AreaFuncional.nombre</td>
				<td>@_t.estado</td>
				<td>@_t.Patente.nombre</td>
				<td>@_t.Producto.nombre</td>
				<td>@($"{_t.horas}:{_t.minutos.ToString().PadLeft(2, char.Parse("0"))}:00")</td>
				<td>
					<i class="bi bi-pencil" @onclick="() => Edit(_t.id)" data-bs-toggle="modal" data-bs-target="#myModal"></i>
				</td>
				<td>
					<i class="bi bi-trash3" @onclick="() => Delete(_t.id)"></i>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {

	private TimeSpan _TotalHoras = TimeSpan.FromMinutes(0);
	private Tareas _newTarea = new Tareas();
	private IList<Tareas> ltareas = new List<Tareas>();
	private IList<dimClientes> lClientes = new List<dimClientes>();
	private IList<dimAreaFuncional> lAreaFuncional = new List<dimAreaFuncional>();
	private IList<dimPatentes> lPatentes = new List<dimPatentes>();
	private IList<dimProductos> lProductos = new List<dimProductos>();
	private string sCliente = string.Empty;
	private string sTarea = string.Empty;
	private string sProducto = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		lClientes = AppState.lClientes;
		lAreaFuncional = AppState.lAreaFuncional;
		lPatentes = AppState.lPatentes;
		lProductos = AppState.lProductos;
		await NuevaTareas();
		cargarTareas();
	}

	private void cargarTareas()
	{
		ltareas = _context.Tareas.Include(c => c.Cliente)
		.Include(p => p.Patente)
		.Include(pr => pr.Producto)
		.Include(a => a.AreaFuncional).
		Where(w => w.Usuario.Equals(AppState.UserName) 
					&& w.Cliente.nombre.Contains(sCliente)
					&& w.AreaFuncional.nombre.Contains(sTarea)
					&& w.Producto.nombre.Contains(sProducto)	
				)
		.ToList();

		CalcularHoras();
		NuevaTareas();
	}

	private async Task NuevaTareas()
	{
		_newTarea = new Tareas();
		_newTarea.Usuario = AppState.UserName;
		CalcularHoras();
	}

	private void CalcularHoras()
	{
		var _MinutosHoras = ltareas.Sum(o => o.horas) * 60;
		var _MinutosTotales = ltareas.Sum(o => o.minutos) + _MinutosHoras;
		_TotalHoras = TimeSpan.FromMinutes(_MinutosTotales);
	}

	private async Task Save()
	{
		try
		{

			if (_newTarea.id > 0)
			{
				_context.Tareas.Update(_newTarea);
				_context.SaveChanges();
			}
			else
			{
				_context.Tareas.Add(_newTarea);
				_context.SaveChanges();
			}
		}
		catch (Exception e)
		{
			throw e;
		}
		//System.Threading.Thread.Sleep(3000);
		cargarTareas();
	}

	private async Task Delete(int id)
	{
		_newTarea = _context.Tareas.Find(id);
		if (_newTarea != null)
		{
			_context.Tareas.Remove(_newTarea);
			_context.SaveChanges();
			cargarTareas();
		}
	}

	private async Task Edit(int id)
	{
		_newTarea = _context.Tareas.Find(id);
	}

	private async Task CleaFilters()
	{
		sCliente = string.Empty;
		sTarea = string.Empty;
		sProducto = string.Empty;

		cargarTareas();
	}
}